* The Recurse Center plan

* May 22

** Plan

I want to start things off by starting with a very simple compiler. I'm mostly
interested in the backend/optimizations/code generation part of it, so I'll try
to keep the frontend really tiny.

This is the plan of action.

   - Pick the simplest front-end, which might be lambda calculus or forth. Don't
     waste much time here.
   - Pick a decent backend. LLVM might be the best choice because its rock
     solid, actually usable in the wild and has all the might of Apple behind
     it.
   - Start thinking about an IR.

First step? Learn LLVM

* May 23

** Progress

Day spent reading various docs on LLVM

1. The LLVM intro docs are a bit dry and boring. Covered a bit of it.
2. The language reference will be handy when I need to look things up.
   [[http://llvm.org/docs/LangRef.html][LLVM Language Reference Manual]]
3. Kaleidoscope tutorial seems like the canonical place to start, but the code
   is terrible. The [[https://github.com/eliben/pykaleidoscope][python port]] could be more useful. I'm about half way though.
4. Working through Stephen Diehl's Haskell version might be the best thing to do.
   [[http://www.stephendiehl.com/llvm/][Implementing a JIT Compiler with Haskell and LLVM]]

I got some advice that one of the best ways to learn might be to read through
the generated code for simple C source code, so I'm going to give that a try as
well.

Read through some of the vd source by @Saul.

Pairing with Trent and Andrew reminded me how little asm I know and I need to
brush up.

Went to the ML paper reading group and felt stupid :)

** Reading list [1/3]

 - [ ] [[https://microcorruption.com/login][Embedded Security CTF]]
 - [ ] [[http://eli.thegreenplace.net/tag/llvm-clang][Articles in tag "LLVM & Clang"]]
 - [X] [[https://en.wikipedia.org/wiki/Static_single_assignment_form][Static single assignment form - Wikipedia]]

** Plan for tomorrow

Continue with the same reading list.
Attend the vd workshop by Saul

* May 24

** progress

   1. Paired with Dom on some ASM bits, there is quite a lot to learn here.
   2. Worked though another chapter of Kaleidoscope
   3. Figured out SSA - neat idea
   4. Worked through the PWL paper, attended the meetup

** Reading list [0/2]

  - [ ] [[https://sourceware.org/binutils/docs/as/][Using as]]

* May 25

Recovering from a shitty hangover.

I could go down 3 paths right now

1. Kaleidoscope; the 'build a simple language in llvm' tutorial
2. LLVM. Work with the manual, Clang output etc to get a better grasp of the
   language
3. x86 assembly.

Plan for the day: work through Kaleidoscope as much as I can. Avoid
distractions. Refer the llvm manual for concepts that aren't clear.

* May 26

Progress is not as great as I'd love it to be. Continue with the same agenda as
yesterday.

Stay focused!

** What did I do?

   - Paired with Dhanush on LLVM IR, learned a lot.
   - Compiled a bunch of simple C programs and read through the generated code.
   - Whiteboard discussion about allocators with Timm and Dhanush
   - Managed to read through a lot of llvm-hs source. A bit hard to follow some
     of the details and its not the best Haskell code.
   - Attended the first Haskell meetup. Volunteered to help the group go through
     the book.
   - A nice dinner with 9 fellow RC folks :D

* May 27

First weekend is here. Should do the chores like cleaning up the home and
laundry. Other than that,

  - [X] Setup ledger, see where the expenses are going
  - [ ] Setup pass on phone and laptop

* May 28

* May 29

  Monday!

  I should start writing some code rather than read through more manuals. Not
  sure where exactly to start. Lisper maybe?

** Progress

Finally started writing some code rather than read through even more LLVM
manuals and made some decent progress. Paired for about 5hrs with @veit and it
was super productive. Thank you Veit! :D

I'm generating some shitty LLVM code now, but its still something. Wil debug and
clean up tomorrow.

** Reading list

   - [ ] Alexis Beingessner's thesis on ownership in rust; "You can't spell
     Trust without Rust"

* May 30

Managed to get Olifant generate the LLVM module, but the code generation is
going wrong somewhere.

Pushed everything to Github.
